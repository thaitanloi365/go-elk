input {
  beats {
    port => 5044
  }
  syslog {
    type => syslog
    port => 5001
  }
  heartbeat {
    type => heartbeat
    interval => 60
    message  => 'Hello from Logstash :joy: http://hihi.com 💓. ようこそ国際交流へ.'
  }
}

filter {
  # if [type] == "app" {
  #   grok {
  #     match => { "message" => "%{TIMESTAMP_ISO8601:time} %{LOGLEVEL:logLevel} %{PATH:source} %{GREEDYDATA:logMessage}" }
  #     named_captures_only => true
  #     remove_tag => ["_grokparsefailure"]
  #     overwrite => "message"
  #   }
  # }

  # if [type] == "syslog" {
  #   grok {
  #     match => { "message" => '%{IPORHOST:traefik.access.remote_ip} - (?:-|"%{DATA:traefik.access.user_name}") \[%{HTTPDATE:traefik.access.time}\] "%{WORD:traefik.access.method} %{DATA:traefik.access.url} HTTP/%{NUMBER:traefik.access.http_version}" (?:-|%{NUMBER:traefik.access.response_code:int}) (?:-|%{NUMBER:traefik.access.body_sent.bytes:int}) (?:-|"%{DATA:traefik.access.referrer}") (?:-|"%{DATA:traefik.access.agent}") (?:-|%{NUMBER:traefik.access.request_count:int}) (?:-|"%{DATA:traefik.access.frontend_name}") (?:-|"%{DATA:traefik.access.backend_url}") %{NUMBER:traefik.access.duration:int}ms' }
  #     named_captures_only => true
  #     remove_tag => ["_grokparsefailure_sysloginput"]
  #     overwrite => "message"
  #   }
  # }

  # if [type] == "traefik" {
  #    grok {
  #     match => { "message" => '%{IPORHOST:traefik.access.remote_ip} - (?:-|"%{DATA:traefik.access.user_name}") \[%{HTTPDATE:traefik.access.time}\] "%{WORD:traefik.access.method} %{DATA:traefik.access.url} HTTP/%{NUMBER:traefik.access.http_version}" (?:-|%{NUMBER:traefik.access.response_code:int}) (?:-|%{NUMBER:traefik.access.body_sent.bytes:int}) (?:-|"%{DATA:traefik.access.referrer}") (?:-|"%{DATA:traefik.access.agent}") (?:-|%{NUMBER:traefik.access.request_count:int}) (?:-|"%{DATA:traefik.access.frontend_name}") (?:-|"%{DATA:traefik.access.backend_url}") %{NUMBER:traefik.access.duration:int}ms' }
  #     named_captures_only => true
  #     remove_tag => ["_grokparsefailure"]
  #     overwrite => "message"
  #   }
  # }
  # grok {
  #     match => { "message" => "%{TIMESTAMP_ISO8601:time} %{LOGLEVEL:logLevel} %{PATH:source} %{GREEDYDATA:logMessage}" }
  #     named_captures_only => true
  #     remove_tag => ["_grokparsefailure"]
  #     overwrite => "message"
  # }
}

output {
  # stdout {
  #   codec => rubydebug
  # }
	elasticsearch {
		hosts => "elasticsearch:9200"
		user => "elastic"
		password => "changeme"
		ecs_compatibility => disabled
	}
}
