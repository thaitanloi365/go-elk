version: "3.8"

services:
  golang:
    image: golang:alpine
    volumes:
      - ./:/app
      - app_logs/:/logs/
    working_dir: /app
    command: go run main.go
    logging:
      driver: syslog
      options:
        syslog-address: "tcp://127.0.0.1:5001"
        tag: "golang"

  traefik:
    image: traefik:v2.4
    container_name: traefik
    restart: always
    ports:
      - "80:80"
      - "443:443"
    environment:
      - "TZ=Asia/HoChiMinh"
    command:
      - --entrypoints.http.address=:80
      - --entrypoints.https.address=:443

      - --providers.docker
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.exposedbydefault=false
      - --providers.docker.swarmmode=false

      - --accesslog.bufferingsize=100
      - --accesslog.fields.defaultmode
      - --accesslog.filepath=
      - --accesslog.format=common
      - --accesslog.filters.statuscodes=200,300-499

      - --log=true
      - --log.filepath=
      - --log.format=common
      - --log.level=INFO

      - --api.dashboard=true
      - --api.debug=true
      - --api.insecure=false

    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik-http.rule=Host(`traefik.test.localhost`)
      - traefik.http.routers.traefik-http.entrypoints=http
      - traefik.http.routers.traefik-http.service=api@internal

    volumes:
      - traefik_logs:/var/log/traefik/
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/share/zoneinfo:/usr/share/zoneinfo:ro
      - ./custom/:/etc/traefik/custom/:ro
    networks:
      - elk

  elasticsearch:
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    healthcheck:
      test: ["CMD", "curl", "-s", "-f", "http://localhost:9200/_cat/health"]
      interval: 3s
      timeout: 3s
      retries: 80
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    ports:
      - 9200:9200
    networks:
      - elk

  logstash:
    build:
      context: logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./logstash/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
      LS_OPTS: "-r --config.reload.automatic --config.reload.interval 20"
    ports:
      - "5000:5000"
      - "5001:5001"
    depends_on:
      - elasticsearch
    networks:
      - elk

  kibana:
    build:
      context: kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    healthcheck:
      test: ["CMD", "curl", "-s", "-f", "http://localhost:5601/api/status"]
      interval: 3s
      timeout: 3s
      retries: 80
    volumes:
      - ./kibana/config/:/usr/share/kibana/config:ro
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch
    networks:
      - elk

  filebeat:
    build:
      context: extensions/filebeat/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - app_logs/:/logs/
      - traefik_logs:/var/log/traefik/
      - ./extensions/filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    user: root
    depends_on:
      - elasticsearch
    networks:
      - elk

volumes:
  app_logs:
  traefik_logs:

networks:
  elk:
    driver: bridge
